+=============================================================================+
|  Needleman-Wunsch ( CPU-GPU cooperative)                                    |
+=============================================================================+

The tool includes a CPU-GPU cooperative implementation of Needleman-Wunch algorith. Two GPU implementation of Needleman-Wunsch algorithm is described in the following paper:

D. Li, K. Sajjapongse, H. Truong, G. Connant, M. Becchi, A Distributed CPU-GPU Framework for Pairwise Alignments on Large-Scale Sequence Datasets. In IEEE International Conference on Application-specific Systems, Architectures and Processors (ASAP '13) , Washington D.C., USA, June, 2013.

Build Information
=================

The code can be compiled and built using the provided makefile.
Targets:
- all (default): builds the tool
- clean: deletes all object files and executable

The code has been compiled using g++ 4.4.6, nvcc 5.5, and under linux versions 2.6.32.

Usage
=====

To see the usage, invoke "./nw-cpu-gpu" without arguments.

> ./nw-cpu-phi

Usage: ./nw-cpu-phi [options]
		[--length|-l <length> ] - x and y length
		[--penalty|-p <penalty>] - penalty (negative integer)
		[--cpu_pairs|-c <number>] - number of pairs on cpu
		[--gpu_pairs|-g <number>] - number of pairs on gpu
		[--device|-d <device> ]- device ID
		[--kernel|-k <kernel type> ]- 0: diagonal 1: tile
		[--num_blocks|-b <blocks> ]- blocks number per grid
		[--num_threads|-t <threads> ]- threads number per block
		[--debug]- 0: no validation (default) 1: validation

Note
----
* The input datasets are generated randomly. You can use "--cpu_pairs" (or "-c") and "--gpu_pairs" (or "-g") options to control the number of pairs.

Another important parameter is the length of sequences. You can use "--length" to change the default length (1600) of sequence pairs.

Needleman-Wunsch algorithm will take two sequences and generate an alignment matrix. The space complexity is quadratic in the length of sequencs L: O(L^2)

* The default number of threads per block is 32 (1 block = 1 warp). The default number of blocks is 28, which is roughly 2x of #SM.

* The --debug option allows validating the results.

* Two different kernels are provided (see nw_kernel_diagonal.cu and nw_kernel_tile.cu). By default, the main invokes the "diagonal" implementation. Different implementations can be invoked by using option "--kernel".

* If you choose "tile" kernel, you may need to pay attention to another parameter "TILE_SIZE". It determines how much shared memory will be used per block. If you want to change it, go to "needle.h" and you can find the MACRO. Also, when using "tile" kernel, the sequence length should be multiple times of tile size.

* "nw-cpu-gpu-test.sh" is a testing script. It contains a few examples.

Examples
========
./nw-cpu-gpu -k 0 -c 1 -g 1 -l 32 --debug
./nw-cpu-gpu -k 0 -c 10 -g 100 -l 128 --debug
./nw-cpu-gpu -k 0 -c 10 -t 96 -l 512 --debug
./nw-cpu-gpu -k 0 -g 20 -t 96 -b 16 -l 1600 --debug

./nw-cpu-gpu -k 1 -c 1 -g 1 -l 32 --debug
./nw-cpu-gpu -k 1 -c 10 -g 100 -l 128 --debug
./nw-cpu-gpu -k 1 -c 10 -t 96 -l 512 --debug
./nw-cpu-gpu -k 1 -g 20 -t 96 -b 16 -l 1600 --debug

